
namespace cuOmmBaking {

/** \mainpage Overview

The OptiX cuda Opacity Micromap Baking library allows hardware-accelerated baking of 
OptiX Opacity Micromap Arrays from textured goemetry. 

It works by taking triangle texture coordinates and opacity textures as input, and generating all buffers needed to build the OptiX Opacity Micromap Array
and Geometry Acceleration Structures using the Opacity Micromap Array. For a higher-level discussion on OptiX Opacity Micromaps, please see the [OptiX Programming Guide]
(https://raytracing-docs.nvidia.com/optix7/guide/index.html#acceleration_structures#accelstruct-omm).

The library takes multiple inputs of textured geometry and generates data for a single shared OptiX Opacity Micromap Array.
The library scans the geometry to detect duplicate triangles, filters out triangles with uniform opacity, 
allocates Opacity Micromap Array data over the remaining unique Opacity Micromaps proportional to covered texel area, 
and evaluates the opacity state of all micro triangles in the Opacity Micromap Array.
The main motivation to bake multiple inputs into a single Opacity Micromap Array should be Opacity Micromap re-use.
If inputs do not share any Opacity Micromaps (for example because they use distinct textures) there is little benefit from
baking them together into a single Opacity Micromap Array.

The library does not allocate any device memory and relies on the user to allocate and pass in the output buffers. 
Instead, the library provides two functions, GetPreBakeInfo and BakeOpacityMicromaps.
The user queries the required output buffer sizes by calling GetPreBakeInfo. 
A following call to BakeOpacityMicromaps will launch the device tasks to generate the Opacity Micromap Array buffer contents. 

Here is some sample
code (adapted from examples/CuOmmBaking/Simple) that demonstrates how to bake an Opacity Micromap Array:

\code

BakeOptions options = {};

// setup a texture input
TextureDesc texture = {};
texture.type = TextureType::CUDA;
texture.cuda.texObject = tex;
texture.cuda.transparencyCutoff = 0.f;
texture.cuda.opacityCutoff = 1.f;

// setup a bake input
BakeInputDesc bakeInput = {};
bakeInput.indexFormat = IndexFormat::I32_UINT;
bakeInput.indexBuffer = ( CUdeviceptr )indexBuffer;
bakeInput.numIndexTriplets = numIndexTriplets;

bakeInput.texCoordFormat = TexCoordFormat::UV32_FLOAT2;
bakeInput.texCoordBuffer = ( CUdeviceptr )texCoordBuffer;
bakeInput.numTexCoords = numTexCoords;

bakeInput.numTextures = 1;
bakeInput.textures = &texture;

// query the output buffer memory requirements
BakeInputBuffers inputBuffer;
BakeBuffers buffers;
GetPreBakeInfo( &options, 1, &bakeInput, &inputBuffer, &buffers );    

// allocate output buffers

size_t usageCountsSizeInBytes = inputBuffer.numMicromapUsageCounts * sizeof( OptixOpacityMicromapUsageCount );
size_t histogramSizeInBytes = buffers.numMicromapHistogramEntries * sizeof( OptixOpacityMicromapHistogramEntry );

cudaMalloc( ( void** )&inputBuffer.indexBuffer, inputBuffer.indexBufferSizeInBytes );
cudaMalloc( ( void** )&inputBuffer.micromapUsageCountsBuffer, usageCountsSizeInBytes );

cudaMalloc( ( void** )&buffers.outputBuffer, buffers.outputBufferSizeInBytes );
cudaMalloc( ( void** )&buffers.perMicromapDescBuffer, buffers.numMicromapDescs * sizeof( OptixOpacityMicromapDesc ) );
cudaMalloc( ( void** )&buffers.micromapHistogramEntriesBuffer, histogramSizeInBytes );
cudaMalloc( ( void** )&buffers.tmpBuffer, buffers.tmpBufferSizeInBytes );

// launch baking
BakeOpacityMicromaps( &options, 1, &bakeInput, &inputBuffer, &buffers, stream );

// download histogram, usage count.
// The histogram and usage count are needed as inputs to optixOpacityMicromapArrayBuild and optixAccelBuild respectively.

std::vector<OptixOpacityMicromapHistogramEntry> histogram;
std::vector<OptixOpacityMicromapUsageCount> usageCounts;

histogram.resize(buffers.numMicromapHistogramEntries);
usageCounts.resize(inputBuffer.numMicromapUsageCounts);

cudaMemcpy( histogram.data(), buffers.micromapHistogramEntriesBuffer, histogramSizeInBytes, cudaMemcpyDeviceToHost );
cudaMemcpy( usageCounts.data(), inputBuffer.micromapUsageCountsBuffer, usageCountsSizeInBytes, cudaMemcpyDeviceToHost );

\endcode
*/

} // namespace cuOmmBaking
